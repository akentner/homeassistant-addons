name: Auto-Update Add-ons when upstream releases

on:
  schedule:
    # Check daily at 6:00 UTC for new releases
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      addon_name:
        description: 'Specific add-on to update (leave empty for all)'
        required: false
        default: ''
      force_update:
        description: 'Force update even if no new version'
        required: false
        default: 'false'

# Required permissions for the workflow
permissions:
  contents: write       # For creating commits and pushing changes
  issues: write         # For creating issues when updates fail
  pull-requests: write  # For creating pull requests (if needed in future)

# Global environment variables for caching optimization
env:
  CACHE_VERSION: v1

# Optimize workflow concurrency
concurrency:
  group: auto-update-${{ github.ref }}
  cancel-in-progress: true

jobs:
  discover-addons:
    runs-on: ubuntu-latest
    outputs:
      addons: ${{ steps.find_addons.outputs.addons }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup cache for yq
        id: cache-yq
        uses: actions/cache@v4
        with:
          path: /usr/local/bin/yq
          key: ${{ env.CACHE_VERSION }}-yq-${{ runner.os }}-v4.47.2
          restore-keys: |
            ${{ env.CACHE_VERSION }}-yq-${{ runner.os }}-

      - name: Install yq
        if: steps.cache-yq.outputs.cache-hit != 'true'
        run: |
          curl -sL "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64" -o /tmp/yq
          sudo mv /tmp/yq /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq
          yq --version > yq-version

      - name: Discover add-ons with upstream configuration
        id: find_addons
        run: |
          # Search for add-on directories with .upstream.yaml configuration
          ADDONS=()

          # Search all directories for add-ons
          for dir in */; do
            if [[ -f "${dir}config.yaml" && -f "${dir}.upstream.yaml" ]]; then
              ADDON_NAME=$(basename "$dir")

              # Check if a specific add-on was requested
              if [[ -n "${{ github.event.inputs.addon_name }}" ]]; then
                if [[ "$ADDON_NAME" != "${{ github.event.inputs.addon_name }}" ]]; then
                  continue
                fi
              fi

              ADDONS+=("$ADDON_NAME")
              echo "Found add-on with upstream config: $ADDON_NAME"
            fi
          done

          # Convert array to JSON for matrix (compact format)
          if [[ ${#ADDONS[@]} -eq 0 ]]; then
            ADDONS_JSON="[]"
          else
            ADDONS_JSON=$(printf '%s\n' "${ADDONS[@]}" | jq -R . | jq -sc .)
          fi
          echo "addons=$ADDONS_JSON" >> "$GITHUB_OUTPUT"
          echo "Discovered add-ons: $ADDONS_JSON"

  check-upstream-releases:
    needs: discover-addons
    if: needs.discover-addons.outputs.addons != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        addon: ${{ fromJson(needs.discover-addons.outputs.addons) }}
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache API responses
        uses: actions/cache@v4
        with:
          path: ~/.cache/github-api
          key: ${{ env.CACHE_VERSION }}-api-cache-${{ matrix.addon }}-${{ github.run_number }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-api-cache-${{ matrix.addon }}-
            ${{ env.CACHE_VERSION }}-api-cache-

      - name: Setup yq cache
        uses: actions/cache@v4
        with:
          path: /usr/local/bin/yq
          key: ${{ env.CACHE_VERSION }}-yq-${{ runner.os }}-v4.47.2
          restore-keys: |
            ${{ env.CACHE_VERSION }}-yq-${{ runner.os }}-

      - name: Install yq
        run: |
          if ! command -v yq &> /dev/null; then
            curl -sL "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64" -o /tmp/yq
            sudo mv /tmp/yq /usr/local/bin/yq
            sudo chmod +x /usr/local/bin/yq
          fi

      - name: Read upstream configuration
        id: read_config
        run: |
          ADDON="${{ matrix.addon }}"

          # Read .upstream.yaml configuration
          UPSTREAM_REPO=$(yq eval '.upstream.repository' \
            "./${ADDON}/.upstream.yaml")
          VERSION_PATTERN=$(yq eval '.upstream.version_pattern // "v*"' \
            "./${ADDON}/.upstream.yaml")
          VERSION_STRIP=$(yq eval '.upstream.version_strip // "^v"' \
            "./${ADDON}/.upstream.yaml")

          {
            echo "upstream_repo=$UPSTREAM_REPO"
            echo "version_pattern=$VERSION_PATTERN"
            echo "version_strip=$VERSION_STRIP"
          } >> "$GITHUB_OUTPUT"

          echo "📦 Add-on: $ADDON"
          echo "🔗 Upstream: $UPSTREAM_REPO"
          echo "🎯 Pattern: $VERSION_PATTERN"

      - name: Get current version from build.yaml
        id: current_version
        run: |
          ADDON="${{ matrix.addon }}"
          CURRENT=$(grep 'VERSION:' "./${ADDON}/build.yaml" | sed 's/.*VERSION: *"\([^"]*\)".*/\1/')
          echo "current_version=$CURRENT" >> "$GITHUB_OUTPUT"
          echo "Current version in build.yaml: $CURRENT"

      - name: Get latest upstream version
        id: upstream_version
        run: |
          UPSTREAM_REPO="${{ steps.read_config.outputs.upstream_repo }}"
          VERSION_STRIP="${{ steps.read_config.outputs.version_strip }}"

          LATEST=$(curl -s "https://api.github.com/repos/${UPSTREAM_REPO}/releases/latest" | jq -r '.tag_name')
          LATEST_CLEAN="${LATEST//${VERSION_STRIP}/}"

          {
            echo "upstream_version=$LATEST_CLEAN"
            echo "upstream_tag=$LATEST"
          } >> "$GITHUB_OUTPUT"
          echo "Latest upstream version: $LATEST -> $LATEST_CLEAN"

      - name: Check if update needed
        id: check_version
        run: |
          ADDON="${{ matrix.addon }}"
          CURRENT="${{ steps.current_version.outputs.current_version }}"
          UPSTREAM="${{ steps.upstream_version.outputs.upstream_version }}"
          FORCE="${{ github.event.inputs.force_update }}"

          if [[ "$CURRENT" == "latest" ]]; then
            echo "needs_update=false" >> "$GITHUB_OUTPUT"
            echo "ℹ️ [$ADDON] Current version is 'latest' - no update needed"
          elif [[ "$CURRENT" != "$UPSTREAM" ]] || [[ "$FORCE" == "true" ]]; then
            echo "needs_update=true" >> "$GITHUB_OUTPUT"
            echo "✅ [$ADDON] Update needed: $CURRENT -> $UPSTREAM"
          else
            echo "needs_update=false" >> "$GITHUB_OUTPUT"
            echo "ℹ️ [$ADDON] Already up to date: $CURRENT"
          fi

  update-addons:
    needs: [discover-addons, check-upstream-releases]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        addon: ${{ fromJson(needs.discover-addons.outputs.addons) }}
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Git operations
        uses: actions/cache@v4
        with:
          path: |
            ~/.gitconfig
            ~/.git-credentials
          key: git-cache-${{ runner.os }}-${{ github.run_id }}
          restore-keys: |
            git-cache-${{ runner.os }}-

      - name: Cache yq binary
        uses: actions/cache@v4
        with:
          path: /usr/local/bin/yq
          key: yq-${{ runner.os }}-v4.47.2
          restore-keys: |
            yq-${{ runner.os }}-

      - name: Install dependencies
        run: |
          if ! command -v yq &> /dev/null; then
            curl -sL "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64" -o /tmp/yq
            sudo mv /tmp/yq /usr/local/bin/yq
            sudo chmod +x /usr/local/bin/yq
          fi

      - name: Read upstream configuration
        id: read_config
        run: |
          ADDON="${{ matrix.addon }}"

          # Read .upstream.yaml configuration
          UPSTREAM_REPO=$(yq eval '.upstream.repository' \
            "./${ADDON}/.upstream.yaml")
          VERSION_STRIP=$(yq eval '.upstream.version_strip // "^v"' \
            "./${ADDON}/.upstream.yaml")
          VERSION_PATTERN=$(yq eval '.addon.version_pattern // "auto"' \
            "./${ADDON}/.upstream.yaml")

          {
            echo "upstream_repo=$UPSTREAM_REPO"
            echo "version_strip=$VERSION_STRIP"
            echo "version_pattern=$VERSION_PATTERN"
          } >> "$GITHUB_OUTPUT"

      - name: Cache API responses
        uses: actions/cache@v4
        with:
          path: ~/.cache/api-responses
          key: api-${{ steps.read_config.outputs.upstream_repo }}-${{ github.run_number }}
          restore-keys: |
            api-${{ steps.read_config.outputs.upstream_repo }}-

      - name: Get versions
        id: get_versions
        run: |
          ADDON="${{ matrix.addon }}"
          VERSION_STRIP="${{ steps.read_config.outputs.version_strip }}"
          UPSTREAM_REPO="${{ steps.read_config.outputs.upstream_repo }}"

          # Create cache directory
          mkdir -p ~/.cache/api-responses

          # Current version from build.yaml
          CURRENT=$(grep 'VERSION:' "./${ADDON}/build.yaml" | sed 's/.*VERSION: *"\([^"]*\)".*/\1/')

          # Latest upstream version with caching
          CACHE_FILE="$HOME/.cache/api-responses/${UPSTREAM_REPO//\//_}-latest.json"

          # Use cached response if less than 5 minutes old
          if [[ -f "$CACHE_FILE" && \
            $(find "$CACHE_FILE" -mmin -5) ]]; then
            echo "Using cached API response for $UPSTREAM_REPO"
            LATEST=$(jq -r '.tag_name' "$CACHE_FILE")
          else
            echo "Fetching fresh API response for $UPSTREAM_REPO"
            curl -s \
              "https://api.github.com/repos/${UPSTREAM_REPO}/releases/latest" \
              > "$CACHE_FILE"
            LATEST=$(jq -r '.tag_name' "$CACHE_FILE")
          fi

          LATEST_CLEAN="${LATEST//${VERSION_STRIP}/}"

          {
            echo "current_version=$CURRENT"
            echo "new_version=$LATEST_CLEAN"
            echo "upstream_tag=$LATEST"
          } >> "$GITHUB_OUTPUT"

      - name: Check if update needed for this addon
        id: check_update
        run: |
          ADDON="${{ matrix.addon }}"
          CURRENT="${{ steps.get_versions.outputs.current_version }}"
          UPSTREAM="${{ steps.get_versions.outputs.new_version }}"
          FORCE="${{ github.event.inputs.force_update }}"

          if [[ "$CURRENT" == "latest" ]]; then
            echo "needs_update=false" >> "$GITHUB_OUTPUT"
            echo "ℹ️ [$ADDON] Current version is 'latest' - no update needed"
          elif [[ "$CURRENT" != "$UPSTREAM" ]] || [[ "$FORCE" == "true" ]]; then
            echo "needs_update=true" >> "$GITHUB_OUTPUT"
            echo "✅ [$ADDON] Update needed: $CURRENT -> $UPSTREAM"
          else
            echo "needs_update=false" >> "$GITHUB_OUTPUT"
            echo "ℹ️ [$ADDON] Already up to date: $CURRENT"
          fi

      - name: Update build.yaml with new version
        if: steps.check_update.outputs.needs_update == 'true'
        run: |
          ADDON="${{ matrix.addon }}"
          NEW_VERSION="${{ steps.get_versions.outputs.new_version }}"
          sed -i "s/VERSION: \".*\"/VERSION: \"$NEW_VERSION\"/" "./${ADDON}/build.yaml"
          echo "Updated ${ADDON}/build.yaml to version: $NEW_VERSION"

      - name: Update config.yaml version
        if: steps.check_update.outputs.needs_update == 'true'
        run: |
          ADDON="${{ matrix.addon }}"
          NEW_VERSION="${{ steps.get_versions.outputs.new_version }}"
          VERSION_PATTERN="${{ steps.read_config.outputs.version_pattern }}"

          # Increment the add-on version (patch version)
          CURRENT_ADDON_VERSION=$(grep 'version:' "./${ADDON}/config.yaml" | \
            sed 's/version: *"\([^"]*\)".*/\1/')

          if [[ "$VERSION_PATTERN" == "sync" ]]; then
            # Use the same version as upstream
            NEW_ADDON_VERSION="$NEW_VERSION"
          elif [[ "$CURRENT_ADDON_VERSION" =~ ^([0-9]+\.[0-9]+-)([0-9]+)$ ]]; then
            # Auto-increment: increase the last number by 1
            PREFIX="${BASH_REMATCH[1]}"
            PATCH="${BASH_REMATCH[2]}"
            NEW_PATCH=$((PATCH + 1))
            NEW_ADDON_VERSION="${PREFIX}${NEW_PATCH}"
          else
            # Fallback: add -auto1
            NEW_ADDON_VERSION="${CURRENT_ADDON_VERSION}-auto1"
          fi

          sed -i "s/version: \".*\"/version: \"$NEW_ADDON_VERSION\"/" "./${ADDON}/config.yaml"
          echo "Updated ${ADDON} Add-on version to: $NEW_ADDON_VERSION"
          echo "NEW_ADDON_VERSION=$NEW_ADDON_VERSION" >> "$GITHUB_ENV"

      - name: Update changelog
        if: steps.check_update.outputs.needs_update == 'true'
        run: |
          ADDON="${{ matrix.addon }}"
          NEW_VERSION="${{ steps.get_versions.outputs.new_version }}"
          OLD_VERSION="${{ steps.get_versions.outputs.current_version }}"
          UPSTREAM_REPO="${{ steps.read_config.outputs.upstream_repo }}"

          # Create or update CHANGELOG
          CHANGELOG_FILE="./${ADDON}/CHANGELOG.md"
          if [[ ! -f "$CHANGELOG_FILE" ]]; then
            echo "# Changelog" > "$CHANGELOG_FILE"
            echo "" >> "$CHANGELOG_FILE"
          fi

          # Add new entry
          TODAY=$(date +%Y-%m-%d)
          sed -i "3i\\## [${{ env.NEW_ADDON_VERSION }}] - $TODAY\\n\\n### Updated\\n- ${UPSTREAM_REPO##*/} from $OLD_VERSION to $NEW_VERSION\\n" "$CHANGELOG_FILE"

      - name: Commit and push changes
        if: steps.check_update.outputs.needs_update == 'true'
        run: |
          ADDON="${{ matrix.addon }}"
          OLD_VERSION="${{ steps.get_versions.outputs.current_version }}"
          NEW_VERSION="${{ steps.get_versions.outputs.new_version }}"
          UPSTREAM_REPO="${{ steps.read_config.outputs.upstream_repo }}"
          UPSTREAM_NAME="${UPSTREAM_REPO##*/}"

          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add "./${ADDON}/build.yaml"
          git add "./${ADDON}/config.yaml"
          git add "./${ADDON}/CHANGELOG.md" || true

          if git diff --staged --quiet; then
            echo "No changes to commit for $ADDON"
          else
            git commit -m "Auto-update [$ADDON]: $UPSTREAM_NAME $OLD_VERSION → $NEW_VERSION

            - Updated $UPSTREAM_NAME to version $NEW_VERSION
            - Bumped $ADDON Add-on version to ${{ env.NEW_ADDON_VERSION }}
            - Auto-generated by upstream release monitoring"

            git push

            echo "✅ Successfully updated $ADDON to use $UPSTREAM_NAME $NEW_VERSION"
          fi

      - name: Create GitHub Issue on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const addon = '${{ matrix.addon }}';
            const oldVersion = '${{ steps.get_versions.outputs.current_version }}';
            const newVersion = '${{ steps.get_versions.outputs.new_version }}';
            const upstreamRepo = '${{ steps.read_config.outputs.upstream_repo }}';

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Failed to auto-update ${addon} to ${newVersion}`,
              body: `The automatic update workflow failed while trying to update **${addon}** from ${oldVersion} to ${newVersion}.

              **Upstream Repository:** ${upstreamRepo}
              **Workflow Run:** ${context.payload.repository.html_url}/actions/runs/${context.runId}

              **Action needed:** Manual update might be required.`,
              labels: ['bug', 'auto-update-failed', `addon:${addon}`]
            })

  notify-success:
    needs: [discover-addons, check-upstream-releases, update-addons]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Summary
        run: |
          echo "🔄 Auto-Update Workflow completed"
          echo "📦 Processed add-ons: ${{ needs.discover-addons.outputs.addons }}"
          echo "✅ Check the individual jobs above for detailed results"
